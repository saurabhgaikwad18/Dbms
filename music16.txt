Supplier(Sid,Sname,address)
Parts(Pid, Pname, Color)
Catalog(sid,pid,cost)
Q. Find name of all parts whose color is green.
Q. Find names of suppliers who supply some red parts.
Q. Find names of all parts whose cost is more than Rs25.


-- Creating the Supplier table
CREATE TABLE Supplier (
  Sid NUMBER PRIMARY KEY,
  Sname VARCHAR2(50),
  address VARCHAR2(100)
);

-- Inserting values into the Supplier table
INSERT INTO Supplier (Sid, Sname, address) VALUES (1, 'Supplier1', 'Address1');
INSERT INTO Supplier (Sid, Sname, address) VALUES (2, 'Supplier2', 'Address2');
INSERT INTO Supplier (Sid, Sname, address) VALUES (3, 'Supplier3', 'Address3');
INSERT INTO Supplier (Sid, Sname, address) VALUES (4, 'Supplier4', 'Address4');
INSERT INTO Supplier (Sid, Sname, address) VALUES (5, 'Supplier5', 'Address5');

-- Creating the Parts table
CREATE TABLE Parts (
  Pid NUMBER PRIMARY KEY,
  Pname VARCHAR2(50),
  Color VARCHAR2(20)
);

-- Inserting values into the Parts table
INSERT INTO Parts (Pid, Pname, Color) VALUES (1, 'Part1', 'green');
INSERT INTO Parts (Pid, Pname, Color) VALUES (2, 'Part2', 'red');
INSERT INTO Parts (Pid, Pname, Color) VALUES (3, 'Part3', 'blue');
INSERT INTO Parts (Pid, Pname, Color) VALUES (4, 'Part4', 'green');
INSERT INTO Parts (Pid, Pname, Color) VALUES (5, 'Part5', 'red');
INSERT INTO Parts (Pid, Pname, Color) VALUES (6, 'Part6', 'green');
INSERT INTO Parts (Pid, Pname, Color) VALUES (7, 'Part7', 'red');
INSERT INTO Parts (Pid, Pname, Color) VALUES (8, 'Part8', 'blue');
INSERT INTO Parts (Pid, Pname, Color) VALUES (9, 'Part9', 'green');
INSERT INTO Parts (Pid, Pname, Color) VALUES (10, 'Part10', 'red');

-- Creating the Catalogs table
CREATE TABLE Catalogs (
  sid NUMBER,
  pid NUMBER,
  cost NUMBER(10, 2),
  PRIMARY KEY(sid, pid),
  FOREIGN KEY(sid) REFERENCES Supplier(Sid),
  FOREIGN KEY(pid) REFERENCES Parts(Pid)
);

-- Inserting values into the Catalogs table
INSERT INTO Catalogs (sid, pid, cost) VALUES (1, 1, 20);
INSERT INTO Catalogs (sid, pid, cost) VALUES (1, 2, 30);
INSERT INTO Catalogs (sid, pid, cost) VALUES (2, 3, 40);
INSERT INTO Catalogs (sid, pid, cost) VALUES (2, 4, 25);
INSERT INTO Catalogs (sid, pid, cost) VALUES (3, 5, 35);
INSERT INTO Catalogs (sid, pid, cost) VALUES (4, 6, 20);
INSERT INTO Catalogs (sid, pid, cost) VALUES (4, 7, 30);
INSERT INTO Catalogs (sid, pid, cost) VALUES (5, 8, 40);
INSERT INTO Catalogs (sid, pid, cost) VALUES (5, 9, 26);
INSERT INTO Catalogs (sid, pid, cost) VALUES (4, 10, 35);


SELECT Pname 
FROM Parts 
WHERE Color = 'green';


SELECT DISTINCT Sname 
FROM Supplier s 
JOIN Catalogs c ON s.Sid = c.sid 
JOIN Parts p ON p.Pid = c.pid 
WHERE p.Color = 'red';


SELECT p.Pname 
FROM Parts p 
JOIN Catalogs c ON p.Pid = c.pid 
WHERE c.cost > 25;



Q:Consider the relational database
Person(pname,street city)
Company(cname,city)
Manages(pname,mname)
Q. Find the street and city of all employees who work for “Idea”, live in Pune and earn more than 
3000

-- Creating the Person table
CREATE TABLE Person (
  pname VARCHAR(50) PRIMARY KEY,
  street VARCHAR(100),
  city VARCHAR(50),
  salary DECIMAL(10, 2)
);

-- Creating the Company table
CREATE TABLE Company (
  cname VARCHAR(50) PRIMARY KEY,
  city VARCHAR(50)
);

-- Creating the Manages table
CREATE TABLE Manages (
  pname VARCHAR(50),
  cname VARCHAR(50),
  PRIMARY KEY(pname, cname),
  FOREIGN KEY(pname) REFERENCES Person(pname),
  FOREIGN KEY(cname) REFERENCES Company(cname)
);


-- Inserting values into the Person table
INSERT INTO Person (pname, street, city, salary) VALUES ('John Doe', 'Street 1', 'Pune', 3500);
INSERT INTO Person (pname, street, city, salary) VALUES ('Jane Doe', 'Street 2', 'Pune', 3000);
INSERT INTO Person (pname, street, city, salary) VALUES ('Jim Doe', 'Street 3', 'Mumbai', 4000);

-- Inserting values into the Company table
INSERT INTO Company (cname, city) VALUES ('Idea', 'Pune');
INSERT INTO Company (cname, city) VALUES ('Innovate', 'Mumbai');

-- Inserting values into the Manages table
INSERT INTO Manages (pname, cname) VALUES ('John Doe', 'Idea');
INSERT INTO Manages (pname, cname) VALUES ('Jane Doe', 'Idea');
INSERT INTO Manages (pname, cname) VALUES ('Jim Doe', 'Innovate');


SELECT p.street, p.city
FROM Person p
JOIN Manages m ON p.pname = m.pname
WHERE m.cname = 'Idea' AND p.city = 'Pune' AND p.salary > 3000;


Q:Consider the relational database
Student(Rollno,name,address)
Subject(sub_code,sub_name)
Marks(Rollno,sub_code, marks)
Q. Find out average marks of each student along with the name of student.
Q. Find how many students have failed in the subject “DBMS”

-- Creating the Student table
CREATE TABLE Student(
    Rollno INT PRIMARY KEY,
    name VARCHAR(100),
    address VARCHAR(255)
);

-- Creating the Subject table
CREATE TABLE Subject(
    sub_code INT PRIMARY KEY,
    sub_name VARCHAR(100)
);

-- Creating the Marks table
CREATE TABLE Marks(
    Rollno INT,
    sub_code INT,
    marks INT,
    FOREIGN KEY (Rollno) REFERENCES Student(Rollno),
    FOREIGN KEY (sub_code) REFERENCES Subject(sub_code)
);

-- Inserting data into the Student table
INSERT ALL
INTO Student (Rollno, name, address) VALUES (1, 'John Doe', '123 Main St')
INTO Student (Rollno, name, address) VALUES (2, 'Jane Doe', '456 Maple Dr')
INTO Student (Rollno, name, address) VALUES (3, 'Jim Brown', '789 Oak Ln')
SELECT * FROM dual;

-- Inserting data into the Subject table
INSERT ALL
INTO Subject (sub_code, sub_name) VALUES (101, 'Mathematics')
INTO Subject (sub_code, sub_name) VALUES (102, 'Physics')
INTO Subject (sub_code, sub_name) VALUES (103, 'DBMS')
SELECT * FROM dual;

-- Inserting data into the Marks table
INSERT ALL
INTO Marks (Rollno, sub_code, marks) VALUES (1, 101, 85)
INTO Marks (Rollno, sub_code, marks) VALUES (1, 102, 90)
INTO Marks (Rollno, sub_code, marks) VALUES (1, 103, 95)
INTO Marks (Rollno, sub_code, marks) VALUES (2, 101, 80)
INTO Marks (Rollno, sub_code, marks) VALUES (2, 102, 70)
INTO Marks (Rollno, sub_code, marks) VALUES (2, 103, 60)
INTO Marks (Rollno, sub_code, marks) VALUES (3, 101, 75)
INTO Marks (Rollno, sub_code, marks) VALUES (3, 102, 85)
INTO Marks (Rollno, sub_code, marks) VALUES (3, 103, 65)
SELECT * FROM dual;

SELECT Student.name, AVG(Marks.marks) as Average_Marks
FROM Student
JOIN Marks ON Student.Rollno = Marks.Rollno
GROUP BY Student.Rollno, Student.name;


SELECT COUNT(*) as Number_of_Students_Failed
FROM Marks
JOIN Subject ON Marks.sub_code = Subject.sub_code
WHERE Subject.sub_name = 'DBMS' AND Marks.marks < 40;

