CREATE TABLE Borrower (
    Roll_no NUMBER PRIMARY KEY,
    Name VARCHAR2(100),
    DateofIssue DATE,
    NameofBook VARCHAR2(100),
    Status CHAR(1) CHECK (Status IN ('I', 'R')) -- Status can be 'I' (Issued) or 'R' (Returned)
);

SQL> INSERT INTO Borrower (Roll_no, Name, DateofIssue, NameofBook, Status) VALUES (1, 'Aman', TO_DATE('2024-04-01', 'YYYY-MM-DD'), 'DBMS', 'I');

CREATE TABLE Fine (
    Fine_ID NUMBER GENERATED BY DEFAULT ON NULL AS IDENTITY,
    Roll_no NUMBER,
    Fine_Date DATE,
    Amount NUMBER(10,2),
    CONSTRAINT Fine_PK PRIMARY KEY (Fine_ID),
    CONSTRAINT Fine_FK FOREIGN KEY (Roll_no) REFERENCES Borrower(Roll_no)
);

DECLARE
    v_roll_no    NUMBER;
    v_book_name  VARCHAR2(100);
    v_issue_date DATE;
    v_days_late  NUMBER;
    v_fine_amt   NUMBER;
    v_status     CHAR(1) := 'R'; -- Status 'R' for returned

    -- Custom exceptions
    overdue_exception EXCEPTION;
    invalid_roll_exception EXCEPTION;

    -- Fine details
    v_fine_date DATE := SYSDATE;

BEGIN
    -- Accept roll_no & name of book from user
    v_roll_no := &roll_no; -- Prompt user to enter roll number
    v_book_name := '&book_name'; -- Prompt user to enter book name

    -- Retrieve issue date and status of the book
    SELECT DateofIssue, Status
    INTO v_issue_date, v_status
    FROM Borrower
    WHERE Roll_no = v_roll_no AND NameofBook = v_book_name;

    -- Check if the book has already been returned
    IF v_status = 'R' THEN
        RAISE_APPLICATION_ERROR(-20001, 'Book has already been returned.');
    END IF;

    -- Calculate number of days late
    v_days_late := TRUNC(SYSDATE) - TRUNC(v_issue_date);

    -- Calculate fine amount based on days overdue
    IF v_days_late > 30 THEN
        v_fine_amt := 50 * v_days_late;
    ELSIF v_days_late >= 15 THEN
        v_fine_amt := 5 * v_days_late;
    ELSE
        v_fine_amt := 0; -- No fine if less than 15 days overdue
    END IF;

    -- Insert fine details if fine amount is greater than 0
    IF v_fine_amt > 0 THEN
        INSERT INTO Fine (Roll_no, Fine_Date, Amount)
        VALUES (v_roll_no, v_fine_date, v_fine_amt);
    END IF;

    -- Update status to 'R' (Returned)
    UPDATE Borrower
    SET Status = v_status
    WHERE Roll_no = v_roll_no AND NameofBook = v_book_name;

    -- Commit the transaction
    COMMIT;

    -- Display success message
    DBMS_OUTPUT.PUT_LINE('Book returned successfully. Fine amount: Rs ' || v_fine_amt);

EXCEPTION
    WHEN NO_DATA_FOUND THEN
        RAISE_APPLICATION_ERROR(-20002, 'Book not found for the provided roll number and book name.');
    WHEN overdue_exception THEN
        RAISE_APPLICATION_ERROR(-20003, 'Book is overdue by more than 30 days.');
    WHEN invalid_roll_exception THEN
        RAISE_APPLICATION_ERROR(-20004, 'Invalid roll number provided.');
    WHEN others THEN
        RAISE_APPLICATION_ERROR(-20005, 'An error occurred: ' || SQLERRM);
END;
/
